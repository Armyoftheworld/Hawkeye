package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.CircleTopicClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIRCLE_TOPIC_CLASS".
*/
public class CircleTopicClassDao extends AbstractDao<CircleTopicClass, Void> {

    public static final String TABLENAME = "CIRCLE_TOPIC_CLASS";

    /**
     * Properties of entity CircleTopicClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TopicId = new Property(0, String.class, "topicId", false, "TOPIC_ID");
        public final static Property TopicName = new Property(1, String.class, "topicName", false, "TOPIC_NAME");
    }


    public CircleTopicClassDao(DaoConfig config) {
        super(config);
    }
    
    public CircleTopicClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIRCLE_TOPIC_CLASS\" (" + //
                "\"TOPIC_ID\" TEXT," + // 0: topicId
                "\"TOPIC_NAME\" TEXT);"); // 1: topicName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIRCLE_TOPIC_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CircleTopicClass entity) {
        stmt.clearBindings();
 
        String topicId = entity.getTopicId();
        if (topicId != null) {
            stmt.bindString(1, topicId);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(2, topicName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CircleTopicClass entity) {
        stmt.clearBindings();
 
        String topicId = entity.getTopicId();
        if (topicId != null) {
            stmt.bindString(1, topicId);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(2, topicName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CircleTopicClass readEntity(Cursor cursor, int offset) {
        CircleTopicClass entity = new CircleTopicClass( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // topicId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // topicName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CircleTopicClass entity, int offset) {
        entity.setTopicId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTopicName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CircleTopicClass entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CircleTopicClass entity) {
        return null;
    }

    @Override
    public boolean hasKey(CircleTopicClass entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
