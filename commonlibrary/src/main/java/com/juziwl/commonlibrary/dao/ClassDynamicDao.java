package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.ClassDynamic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLASS_DYNAMIC".
*/
public class ClassDynamicDao extends AbstractDao<ClassDynamic, Long> {

    public static final String TABLENAME = "CLASS_DYNAMIC";

    /**
     * Properties of entity ClassDynamic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventId = new Property(1, String.class, "eventId", false, "EVENT_ID");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property IsFavourite = new Property(3, String.class, "isFavourite", false, "IS_FAVOURITE");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property EventInfo = new Property(5, String.class, "eventInfo", false, "EVENT_INFO");
        public final static Property FullName = new Property(6, String.class, "fullName", false, "FULL_NAME");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property EventImage = new Property(8, String.class, "eventImage", false, "EVENT_IMAGE");
        public final static Property ClassId = new Property(9, String.class, "classId", false, "CLASS_ID");
        public final static Property FavouriteNum = new Property(10, String.class, "favouriteNum", false, "FAVOURITE_NUM");
        public final static Property ClassName = new Property(11, String.class, "className", false, "CLASS_NAME");
        public final static Property CommentNum = new Property(12, String.class, "commentNum", false, "COMMENT_NUM");
        public final static Property IsDelete = new Property(13, String.class, "isDelete", false, "IS_DELETE");
        public final static Property DeleteTime = new Property(14, String.class, "deleteTime", false, "DELETE_TIME");
        public final static Property Type = new Property(15, String.class, "type", false, "TYPE");
        public final static Property ArticleTitle = new Property(16, String.class, "articleTitle", false, "ARTICLE_TITLE");
        public final static Property ArticleId = new Property(17, String.class, "articleId", false, "ARTICLE_ID");
        public final static Property ArticleUrl = new Property(18, String.class, "articleUrl", false, "ARTICLE_URL");
        public final static Property ArticleImg = new Property(19, String.class, "articleImg", false, "ARTICLE_IMG");
        public final static Property ArticleDesc = new Property(20, String.class, "articleDesc", false, "ARTICLE_DESC");
        public final static Property ScoreCount = new Property(21, String.class, "scoreCount", false, "SCORE_COUNT");
        public final static Property GiftCount = new Property(22, String.class, "giftCount", false, "GIFT_COUNT");
        public final static Property IsSendGift = new Property(23, String.class, "isSendGift", false, "IS_SEND_GIFT");
        public final static Property IsSendScore = new Property(24, String.class, "isSendScore", false, "IS_SEND_SCORE");
        public final static Property VideoUrl = new Property(25, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property VideoPicUrl = new Property(26, String.class, "videoPicUrl", false, "VIDEO_PIC_URL");
        public final static Property VideoSize = new Property(27, String.class, "videoSize", false, "VIDEO_SIZE");
        public final static Property Platform = new Property(28, String.class, "platform", false, "PLATFORM");
        public final static Property IsPinglun = new Property(29, String.class, "isPinglun", false, "IS_PINGLUN");
        public final static Property Mid = new Property(30, String.class, "mid", false, "MID");
    }


    public ClassDynamicDao(DaoConfig config) {
        super(config);
    }
    
    public ClassDynamicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLASS_DYNAMIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EVENT_ID\" TEXT," + // 1: eventId
                "\"CREATE_TIME\" TEXT," + // 2: createTime
                "\"IS_FAVOURITE\" TEXT," + // 3: isFavourite
                "\"USER_ID\" TEXT," + // 4: userId
                "\"EVENT_INFO\" TEXT," + // 5: eventInfo
                "\"FULL_NAME\" TEXT," + // 6: fullName
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"EVENT_IMAGE\" TEXT," + // 8: eventImage
                "\"CLASS_ID\" TEXT," + // 9: classId
                "\"FAVOURITE_NUM\" TEXT," + // 10: favouriteNum
                "\"CLASS_NAME\" TEXT," + // 11: className
                "\"COMMENT_NUM\" TEXT," + // 12: commentNum
                "\"IS_DELETE\" TEXT," + // 13: isDelete
                "\"DELETE_TIME\" TEXT," + // 14: deleteTime
                "\"TYPE\" TEXT," + // 15: type
                "\"ARTICLE_TITLE\" TEXT," + // 16: articleTitle
                "\"ARTICLE_ID\" TEXT," + // 17: articleId
                "\"ARTICLE_URL\" TEXT," + // 18: articleUrl
                "\"ARTICLE_IMG\" TEXT," + // 19: articleImg
                "\"ARTICLE_DESC\" TEXT," + // 20: articleDesc
                "\"SCORE_COUNT\" TEXT," + // 21: scoreCount
                "\"GIFT_COUNT\" TEXT," + // 22: giftCount
                "\"IS_SEND_GIFT\" TEXT," + // 23: isSendGift
                "\"IS_SEND_SCORE\" TEXT," + // 24: isSendScore
                "\"VIDEO_URL\" TEXT," + // 25: videoUrl
                "\"VIDEO_PIC_URL\" TEXT," + // 26: videoPicUrl
                "\"VIDEO_SIZE\" TEXT," + // 27: videoSize
                "\"PLATFORM\" TEXT," + // 28: platform
                "\"IS_PINGLUN\" TEXT," + // 29: isPinglun
                "\"MID\" TEXT);"); // 30: mid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLASS_DYNAMIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClassDynamic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(2, eventId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String isFavourite = entity.getIsFavourite();
        if (isFavourite != null) {
            stmt.bindString(4, isFavourite);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String eventInfo = entity.getEventInfo();
        if (eventInfo != null) {
            stmt.bindString(6, eventInfo);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(7, fullName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String eventImage = entity.getEventImage();
        if (eventImage != null) {
            stmt.bindString(9, eventImage);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(10, classId);
        }
 
        String favouriteNum = entity.getFavouriteNum();
        if (favouriteNum != null) {
            stmt.bindString(11, favouriteNum);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(12, className);
        }
 
        String commentNum = entity.getCommentNum();
        if (commentNum != null) {
            stmt.bindString(13, commentNum);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(14, isDelete);
        }
 
        String deleteTime = entity.getDeleteTime();
        if (deleteTime != null) {
            stmt.bindString(15, deleteTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(16, type);
        }
 
        String articleTitle = entity.getArticleTitle();
        if (articleTitle != null) {
            stmt.bindString(17, articleTitle);
        }
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(18, articleId);
        }
 
        String articleUrl = entity.getArticleUrl();
        if (articleUrl != null) {
            stmt.bindString(19, articleUrl);
        }
 
        String articleImg = entity.getArticleImg();
        if (articleImg != null) {
            stmt.bindString(20, articleImg);
        }
 
        String articleDesc = entity.getArticleDesc();
        if (articleDesc != null) {
            stmt.bindString(21, articleDesc);
        }
 
        String scoreCount = entity.getScoreCount();
        if (scoreCount != null) {
            stmt.bindString(22, scoreCount);
        }
 
        String giftCount = entity.getGiftCount();
        if (giftCount != null) {
            stmt.bindString(23, giftCount);
        }
 
        String isSendGift = entity.getIsSendGift();
        if (isSendGift != null) {
            stmt.bindString(24, isSendGift);
        }
 
        String isSendScore = entity.getIsSendScore();
        if (isSendScore != null) {
            stmt.bindString(25, isSendScore);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(26, videoUrl);
        }
 
        String videoPicUrl = entity.getVideoPicUrl();
        if (videoPicUrl != null) {
            stmt.bindString(27, videoPicUrl);
        }
 
        String videoSize = entity.getVideoSize();
        if (videoSize != null) {
            stmt.bindString(28, videoSize);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(29, platform);
        }
 
        String isPinglun = entity.getIsPinglun();
        if (isPinglun != null) {
            stmt.bindString(30, isPinglun);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(31, mid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClassDynamic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(2, eventId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String isFavourite = entity.getIsFavourite();
        if (isFavourite != null) {
            stmt.bindString(4, isFavourite);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String eventInfo = entity.getEventInfo();
        if (eventInfo != null) {
            stmt.bindString(6, eventInfo);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(7, fullName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String eventImage = entity.getEventImage();
        if (eventImage != null) {
            stmt.bindString(9, eventImage);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(10, classId);
        }
 
        String favouriteNum = entity.getFavouriteNum();
        if (favouriteNum != null) {
            stmt.bindString(11, favouriteNum);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(12, className);
        }
 
        String commentNum = entity.getCommentNum();
        if (commentNum != null) {
            stmt.bindString(13, commentNum);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(14, isDelete);
        }
 
        String deleteTime = entity.getDeleteTime();
        if (deleteTime != null) {
            stmt.bindString(15, deleteTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(16, type);
        }
 
        String articleTitle = entity.getArticleTitle();
        if (articleTitle != null) {
            stmt.bindString(17, articleTitle);
        }
 
        String articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindString(18, articleId);
        }
 
        String articleUrl = entity.getArticleUrl();
        if (articleUrl != null) {
            stmt.bindString(19, articleUrl);
        }
 
        String articleImg = entity.getArticleImg();
        if (articleImg != null) {
            stmt.bindString(20, articleImg);
        }
 
        String articleDesc = entity.getArticleDesc();
        if (articleDesc != null) {
            stmt.bindString(21, articleDesc);
        }
 
        String scoreCount = entity.getScoreCount();
        if (scoreCount != null) {
            stmt.bindString(22, scoreCount);
        }
 
        String giftCount = entity.getGiftCount();
        if (giftCount != null) {
            stmt.bindString(23, giftCount);
        }
 
        String isSendGift = entity.getIsSendGift();
        if (isSendGift != null) {
            stmt.bindString(24, isSendGift);
        }
 
        String isSendScore = entity.getIsSendScore();
        if (isSendScore != null) {
            stmt.bindString(25, isSendScore);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(26, videoUrl);
        }
 
        String videoPicUrl = entity.getVideoPicUrl();
        if (videoPicUrl != null) {
            stmt.bindString(27, videoPicUrl);
        }
 
        String videoSize = entity.getVideoSize();
        if (videoSize != null) {
            stmt.bindString(28, videoSize);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(29, platform);
        }
 
        String isPinglun = entity.getIsPinglun();
        if (isPinglun != null) {
            stmt.bindString(30, isPinglun);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(31, mid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClassDynamic readEntity(Cursor cursor, int offset) {
        ClassDynamic entity = new ClassDynamic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isFavourite
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // eventInfo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fullName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // eventImage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // classId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // favouriteNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // className
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // commentNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isDelete
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // deleteTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // type
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // articleTitle
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // articleId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // articleUrl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // articleImg
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // articleDesc
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // scoreCount
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // giftCount
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // isSendGift
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // isSendScore
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // videoUrl
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // videoPicUrl
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // videoSize
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // platform
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // isPinglun
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // mid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClassDynamic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsFavourite(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEventInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFullName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEventImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClassId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFavouriteNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClassName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCommentNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsDelete(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeleteTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setArticleTitle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setArticleId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setArticleUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setArticleImg(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setArticleDesc(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setScoreCount(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGiftCount(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsSendGift(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsSendScore(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setVideoUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVideoPicUrl(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setVideoSize(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPlatform(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsPinglun(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMid(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClassDynamic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClassDynamic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClassDynamic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
