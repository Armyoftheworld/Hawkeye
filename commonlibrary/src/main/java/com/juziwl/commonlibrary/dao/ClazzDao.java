package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.Clazz;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLAZZ".
*/
public class ClazzDao extends AbstractDao<Clazz, Long> {

    public static final String TABLENAME = "CLAZZ";

    /**
     * Properties of entity Clazz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Role = new Property(2, String.class, "role", false, "ROLE");
        public final static Property SchoolId = new Property(3, String.class, "schoolId", false, "SCHOOL_ID");
        public final static Property SchoolName = new Property(4, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property ClassId = new Property(5, String.class, "classId", false, "CLASS_ID");
        public final static Property ClassName = new Property(6, String.class, "className", false, "CLASS_NAME");
        public final static Property StudentId = new Property(7, String.class, "studentId", false, "STUDENT_ID");
        public final static Property StudentName = new Property(8, String.class, "studentName", false, "STUDENT_NAME");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property SubjectName = new Property(10, String.class, "subjectName", false, "SUBJECT_NAME");
        public final static Property SubjectId = new Property(11, String.class, "subjectId", false, "SUBJECT_ID");
        public final static Property ChatFun = new Property(12, String.class, "chatFun", false, "CHAT_FUN");
        public final static Property SendFun = new Property(13, String.class, "sendFun", false, "SEND_FUN");
        public final static Property Isnickname = new Property(14, String.class, "isnickname", false, "ISNICKNAME");
        public final static Property ClassBlocked = new Property(15, String.class, "classBlocked", false, "CLASS_BLOCKED");
        public final static Property Owner = new Property(16, String.class, "owner", false, "OWNER");
        public final static Property ClassNo = new Property(17, String.class, "classNo", false, "CLASS_NO");
        public final static Property IsSelected = new Property(18, Boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property CreateTime = new Property(19, String.class, "createTime", false, "CREATE_TIME");
        public final static Property MemsNum = new Property(20, String.class, "memsNum", false, "MEMS_NUM");
        public final static Property HasNew = new Property(21, Boolean.class, "hasNew", false, "HAS_NEW");
        public final static Property IsChat = new Property(22, Integer.class, "isChat", false, "IS_CHAT");
        public final static Property IsTeacher = new Property(23, Integer.class, "isTeacher", false, "IS_TEACHER");
        public final static Property ClassNamePinyin = new Property(24, String.class, "classNamePinyin", false, "CLASS_NAME_PINYIN");
        public final static Property Flag = new Property(25, Integer.class, "flag", false, "FLAG");
        public final static Property Mid = new Property(26, String.class, "mid", false, "MID");
    }


    public ClazzDao(DaoConfig config) {
        super(config);
    }
    
    public ClazzDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLAZZ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ROLE\" TEXT," + // 2: role
                "\"SCHOOL_ID\" TEXT," + // 3: schoolId
                "\"SCHOOL_NAME\" TEXT," + // 4: schoolName
                "\"CLASS_ID\" TEXT," + // 5: classId
                "\"CLASS_NAME\" TEXT," + // 6: className
                "\"STUDENT_ID\" TEXT," + // 7: studentId
                "\"STUDENT_NAME\" TEXT," + // 8: studentName
                "\"ADDRESS\" TEXT," + // 9: address
                "\"SUBJECT_NAME\" TEXT," + // 10: subjectName
                "\"SUBJECT_ID\" TEXT," + // 11: subjectId
                "\"CHAT_FUN\" TEXT," + // 12: chatFun
                "\"SEND_FUN\" TEXT," + // 13: sendFun
                "\"ISNICKNAME\" TEXT," + // 14: isnickname
                "\"CLASS_BLOCKED\" TEXT," + // 15: classBlocked
                "\"OWNER\" TEXT," + // 16: owner
                "\"CLASS_NO\" TEXT," + // 17: classNo
                "\"IS_SELECTED\" INTEGER," + // 18: isSelected
                "\"CREATE_TIME\" TEXT," + // 19: createTime
                "\"MEMS_NUM\" TEXT," + // 20: memsNum
                "\"HAS_NEW\" INTEGER," + // 21: hasNew
                "\"IS_CHAT\" INTEGER," + // 22: isChat
                "\"IS_TEACHER\" INTEGER," + // 23: isTeacher
                "\"CLASS_NAME_PINYIN\" TEXT," + // 24: classNamePinyin
                "\"FLAG\" INTEGER," + // 25: flag
                "\"MID\" TEXT);"); // 26: mid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLAZZ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clazz entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(3, role);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(4, schoolId);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(5, schoolName);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(6, classId);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(7, className);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(8, studentId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(9, studentName);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(11, subjectName);
        }
 
        String subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindString(12, subjectId);
        }
 
        String chatFun = entity.getChatFun();
        if (chatFun != null) {
            stmt.bindString(13, chatFun);
        }
 
        String sendFun = entity.getSendFun();
        if (sendFun != null) {
            stmt.bindString(14, sendFun);
        }
 
        String isnickname = entity.getIsnickname();
        if (isnickname != null) {
            stmt.bindString(15, isnickname);
        }
 
        String classBlocked = entity.getClassBlocked();
        if (classBlocked != null) {
            stmt.bindString(16, classBlocked);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(17, owner);
        }
 
        String classNo = entity.getClassNo();
        if (classNo != null) {
            stmt.bindString(18, classNo);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(19, isSelected ? 1L: 0L);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(20, createTime);
        }
 
        String memsNum = entity.getMemsNum();
        if (memsNum != null) {
            stmt.bindString(21, memsNum);
        }
 
        Boolean hasNew = entity.getHasNew();
        if (hasNew != null) {
            stmt.bindLong(22, hasNew ? 1L: 0L);
        }
 
        Integer isChat = entity.getIsChat();
        if (isChat != null) {
            stmt.bindLong(23, isChat);
        }
 
        Integer isTeacher = entity.getIsTeacher();
        if (isTeacher != null) {
            stmt.bindLong(24, isTeacher);
        }
 
        String classNamePinyin = entity.getClassNamePinyin();
        if (classNamePinyin != null) {
            stmt.bindString(25, classNamePinyin);
        }
 
        Integer flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(26, flag);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(27, mid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clazz entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(3, role);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(4, schoolId);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(5, schoolName);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(6, classId);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(7, className);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(8, studentId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(9, studentName);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(11, subjectName);
        }
 
        String subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindString(12, subjectId);
        }
 
        String chatFun = entity.getChatFun();
        if (chatFun != null) {
            stmt.bindString(13, chatFun);
        }
 
        String sendFun = entity.getSendFun();
        if (sendFun != null) {
            stmt.bindString(14, sendFun);
        }
 
        String isnickname = entity.getIsnickname();
        if (isnickname != null) {
            stmt.bindString(15, isnickname);
        }
 
        String classBlocked = entity.getClassBlocked();
        if (classBlocked != null) {
            stmt.bindString(16, classBlocked);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(17, owner);
        }
 
        String classNo = entity.getClassNo();
        if (classNo != null) {
            stmt.bindString(18, classNo);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(19, isSelected ? 1L: 0L);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(20, createTime);
        }
 
        String memsNum = entity.getMemsNum();
        if (memsNum != null) {
            stmt.bindString(21, memsNum);
        }
 
        Boolean hasNew = entity.getHasNew();
        if (hasNew != null) {
            stmt.bindLong(22, hasNew ? 1L: 0L);
        }
 
        Integer isChat = entity.getIsChat();
        if (isChat != null) {
            stmt.bindLong(23, isChat);
        }
 
        Integer isTeacher = entity.getIsTeacher();
        if (isTeacher != null) {
            stmt.bindLong(24, isTeacher);
        }
 
        String classNamePinyin = entity.getClassNamePinyin();
        if (classNamePinyin != null) {
            stmt.bindString(25, classNamePinyin);
        }
 
        Integer flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(26, flag);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(27, mid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Clazz readEntity(Cursor cursor, int offset) {
        Clazz entity = new Clazz( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // role
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // schoolId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // schoolName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // classId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // className
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // studentId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // studentName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // subjectName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // subjectId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // chatFun
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sendFun
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isnickname
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // classBlocked
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // owner
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // classNo
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isSelected
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // createTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // memsNum
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // hasNew
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // isChat
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // isTeacher
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // classNamePinyin
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // flag
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // mid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clazz entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRole(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchoolId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSchoolName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClassId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClassName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStudentId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStudentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSubjectName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSubjectId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChatFun(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSendFun(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsnickname(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setClassBlocked(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOwner(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setClassNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsSelected(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setCreateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMemsNum(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHasNew(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setIsChat(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setIsTeacher(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setClassNamePinyin(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setFlag(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setMid(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Clazz entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Clazz entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Clazz entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
