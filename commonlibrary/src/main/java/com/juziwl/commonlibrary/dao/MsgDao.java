package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Long> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromUser = new Property(1, String.class, "fromUser", false, "FROM_USER");
        public final static Property ToUser = new Property(2, String.class, "toUser", false, "TO_USER");
        public final static Property Msgtext = new Property(3, String.class, "msgtext", false, "MSGTEXT");
        public final static Property Datetime = new Property(4, String.class, "datetime", false, "DATETIME");
        public final static Property IsFrom = new Property(5, String.class, "isFrom", false, "IS_FROM");
        public final static Property IsRead = new Property(6, String.class, "isRead", false, "IS_READ");
        public final static Property IsLoadOver = new Property(7, Boolean.class, "isLoadOver", false, "IS_LOAD_OVER");
        public final static Property Msgtype = new Property(8, String.class, "msgtype", false, "MSGTYPE");
        public final static Property CardId = new Property(9, String.class, "cardId", false, "CARD_ID");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Iconurl = new Property(11, String.class, "iconurl", false, "ICONURL");
        public final static Property Filepath = new Property(12, String.class, "filepath", false, "FILEPATH");
        public final static Property Speechlength = new Property(13, Long.class, "speechlength", false, "SPEECHLENGTH");
        public final static Property Whoid = new Property(14, String.class, "whoid", false, "WHOID");
        public final static Property Fid = new Property(15, String.class, "fid", false, "FID");
        public final static Property Username = new Property(16, String.class, "username", false, "USERNAME");
        public final static Property Face = new Property(17, String.class, "face", false, "FACE");
        public final static Property Clazzid = new Property(18, String.class, "clazzid", false, "CLAZZID");
        public final static Property Clazzimg = new Property(19, String.class, "clazzimg", false, "CLAZZIMG");
        public final static Property Clazzname = new Property(20, String.class, "clazzname", false, "CLAZZNAME");
        public final static Property Chatflag = new Property(21, String.class, "chatflag", false, "CHATFLAG");
        public final static Property Role = new Property(22, String.class, "role", false, "ROLE");
        public final static Property IsLocal = new Property(23, String.class, "isLocal", false, "IS_LOCAL");
        public final static Property CourseId = new Property(24, String.class, "courseId", false, "COURSE_ID");
    }


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM_USER\" TEXT," + // 1: fromUser
                "\"TO_USER\" TEXT," + // 2: toUser
                "\"MSGTEXT\" TEXT," + // 3: msgtext
                "\"DATETIME\" TEXT," + // 4: datetime
                "\"IS_FROM\" TEXT," + // 5: isFrom
                "\"IS_READ\" TEXT," + // 6: isRead
                "\"IS_LOAD_OVER\" INTEGER," + // 7: isLoadOver
                "\"MSGTYPE\" TEXT," + // 8: msgtype
                "\"CARD_ID\" TEXT," + // 9: cardId
                "\"TITLE\" TEXT," + // 10: title
                "\"ICONURL\" TEXT," + // 11: iconurl
                "\"FILEPATH\" TEXT," + // 12: filepath
                "\"SPEECHLENGTH\" INTEGER," + // 13: speechlength
                "\"WHOID\" TEXT," + // 14: whoid
                "\"FID\" TEXT," + // 15: fid
                "\"USERNAME\" TEXT," + // 16: username
                "\"FACE\" TEXT," + // 17: face
                "\"CLAZZID\" TEXT," + // 18: clazzid
                "\"CLAZZIMG\" TEXT," + // 19: clazzimg
                "\"CLAZZNAME\" TEXT," + // 20: clazzname
                "\"CHATFLAG\" TEXT," + // 21: chatflag
                "\"ROLE\" TEXT," + // 22: role
                "\"IS_LOCAL\" TEXT," + // 23: isLocal
                "\"COURSE_ID\" TEXT);"); // 24: courseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromUser = entity.getFromUser();
        if (fromUser != null) {
            stmt.bindString(2, fromUser);
        }
 
        String toUser = entity.getToUser();
        if (toUser != null) {
            stmt.bindString(3, toUser);
        }
 
        String msgtext = entity.getMsgtext();
        if (msgtext != null) {
            stmt.bindString(4, msgtext);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(5, datetime);
        }
 
        String isFrom = entity.getIsFrom();
        if (isFrom != null) {
            stmt.bindString(6, isFrom);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(7, isRead);
        }
 
        Boolean isLoadOver = entity.getIsLoadOver();
        if (isLoadOver != null) {
            stmt.bindLong(8, isLoadOver ? 1L: 0L);
        }
 
        String msgtype = entity.getMsgtype();
        if (msgtype != null) {
            stmt.bindString(9, msgtype);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(10, cardId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String iconurl = entity.getIconurl();
        if (iconurl != null) {
            stmt.bindString(12, iconurl);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(13, filepath);
        }
 
        Long speechlength = entity.getSpeechlength();
        if (speechlength != null) {
            stmt.bindLong(14, speechlength);
        }
 
        String whoid = entity.getWhoid();
        if (whoid != null) {
            stmt.bindString(15, whoid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(16, fid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(17, username);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(18, face);
        }
 
        String clazzid = entity.getClazzid();
        if (clazzid != null) {
            stmt.bindString(19, clazzid);
        }
 
        String clazzimg = entity.getClazzimg();
        if (clazzimg != null) {
            stmt.bindString(20, clazzimg);
        }
 
        String clazzname = entity.getClazzname();
        if (clazzname != null) {
            stmt.bindString(21, clazzname);
        }
 
        String chatflag = entity.getChatflag();
        if (chatflag != null) {
            stmt.bindString(22, chatflag);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(23, role);
        }
 
        String isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindString(24, isLocal);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(25, courseId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromUser = entity.getFromUser();
        if (fromUser != null) {
            stmt.bindString(2, fromUser);
        }
 
        String toUser = entity.getToUser();
        if (toUser != null) {
            stmt.bindString(3, toUser);
        }
 
        String msgtext = entity.getMsgtext();
        if (msgtext != null) {
            stmt.bindString(4, msgtext);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(5, datetime);
        }
 
        String isFrom = entity.getIsFrom();
        if (isFrom != null) {
            stmt.bindString(6, isFrom);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(7, isRead);
        }
 
        Boolean isLoadOver = entity.getIsLoadOver();
        if (isLoadOver != null) {
            stmt.bindLong(8, isLoadOver ? 1L: 0L);
        }
 
        String msgtype = entity.getMsgtype();
        if (msgtype != null) {
            stmt.bindString(9, msgtype);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(10, cardId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String iconurl = entity.getIconurl();
        if (iconurl != null) {
            stmt.bindString(12, iconurl);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(13, filepath);
        }
 
        Long speechlength = entity.getSpeechlength();
        if (speechlength != null) {
            stmt.bindLong(14, speechlength);
        }
 
        String whoid = entity.getWhoid();
        if (whoid != null) {
            stmt.bindString(15, whoid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(16, fid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(17, username);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(18, face);
        }
 
        String clazzid = entity.getClazzid();
        if (clazzid != null) {
            stmt.bindString(19, clazzid);
        }
 
        String clazzimg = entity.getClazzimg();
        if (clazzimg != null) {
            stmt.bindString(20, clazzimg);
        }
 
        String clazzname = entity.getClazzname();
        if (clazzname != null) {
            stmt.bindString(21, clazzname);
        }
 
        String chatflag = entity.getChatflag();
        if (chatflag != null) {
            stmt.bindString(22, chatflag);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(23, role);
        }
 
        String isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindString(24, isLocal);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(25, courseId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromUser
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toUser
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgtext
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // datetime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isFrom
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isRead
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isLoadOver
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // msgtype
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cardId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // iconurl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // filepath
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // speechlength
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // whoid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // username
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // face
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // clazzid
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // clazzimg
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // clazzname
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // chatflag
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // role
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // isLocal
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // courseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromUser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToUser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgtext(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDatetime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsFrom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsRead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLoadOver(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setMsgtype(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCardId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIconurl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFilepath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSpeechlength(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setWhoid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUsername(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFace(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setClazzid(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setClazzimg(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setClazzname(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setChatflag(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRole(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsLocal(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCourseId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Msg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
