package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, Long> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pinyin = new Property(1, String.class, "pinyin", false, "PINYIN");
        public final static Property FirstLetter = new Property(2, String.class, "firstLetter", false, "FIRST_LETTER");
        public final static Property AreaName = new Property(3, String.class, "areaName", false, "AREA_NAME");
        public final static Property Areaid = new Property(4, String.class, "areaid", false, "AREAID");
        public final static Property IsHotCity = new Property(5, Integer.class, "isHotCity", false, "IS_HOT_CITY");
        public final static Property ParentCityName = new Property(6, String.class, "parentCityName", false, "PARENT_CITY_NAME");
        public final static Property ParentCityId = new Property(7, String.class, "parentCityId", false, "PARENT_CITY_ID");
    }


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PINYIN\" TEXT," + // 1: pinyin
                "\"FIRST_LETTER\" TEXT," + // 2: firstLetter
                "\"AREA_NAME\" TEXT," + // 3: areaName
                "\"AREAID\" TEXT," + // 4: areaid
                "\"IS_HOT_CITY\" INTEGER," + // 5: isHotCity
                "\"PARENT_CITY_NAME\" TEXT," + // 6: parentCityName
                "\"PARENT_CITY_ID\" TEXT);"); // 7: parentCityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(2, pinyin);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(3, firstLetter);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(4, areaName);
        }
 
        String areaid = entity.getAreaid();
        if (areaid != null) {
            stmt.bindString(5, areaid);
        }
 
        Integer isHotCity = entity.getIsHotCity();
        if (isHotCity != null) {
            stmt.bindLong(6, isHotCity);
        }
 
        String parentCityName = entity.getParentCityName();
        if (parentCityName != null) {
            stmt.bindString(7, parentCityName);
        }
 
        String parentCityId = entity.getParentCityId();
        if (parentCityId != null) {
            stmt.bindString(8, parentCityId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(2, pinyin);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(3, firstLetter);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(4, areaName);
        }
 
        String areaid = entity.getAreaid();
        if (areaid != null) {
            stmt.bindString(5, areaid);
        }
 
        Integer isHotCity = entity.getIsHotCity();
        if (isHotCity != null) {
            stmt.bindLong(6, isHotCity);
        }
 
        String parentCityName = entity.getParentCityName();
        if (parentCityName != null) {
            stmt.bindString(7, parentCityName);
        }
 
        String parentCityId = entity.getParentCityId();
        if (parentCityId != null) {
            stmt.bindString(8, parentCityId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pinyin
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstLetter
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaid
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isHotCity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // parentCityName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // parentCityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPinyin(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirstLetter(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsHotCity(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setParentCityName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParentCityId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Area entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Area entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Area entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
