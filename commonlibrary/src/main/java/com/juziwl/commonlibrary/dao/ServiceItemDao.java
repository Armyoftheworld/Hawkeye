package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.ServiceItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVICE_ITEM".
*/
public class ServiceItemDao extends AbstractDao<ServiceItem, Long> {

    public static final String TABLENAME = "SERVICE_ITEM";

    /**
     * Properties of entity ServiceItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property AppIcomResId = new Property(2, Integer.class, "appIcomResId", false, "APP_ICOM_RES_ID");
        public final static Property Id = new Property(3, Integer.class, "id", false, "ID");
        public final static Property OrderId = new Property(4, Integer.class, "orderId", false, "ORDER_ID");
        public final static Property Selectedone = new Property(5, Integer.class, "selectedone", false, "SELECTEDONE");
        public final static Property Selected = new Property(6, Boolean.class, "selected", false, "SELECTED");
        public final static Property IsHasNew = new Property(7, Integer.class, "isHasNew", false, "IS_HAS_NEW");
        public final static Property UserId = new Property(8, String.class, "userId", false, "USER_ID");
    }


    public ServiceItemDao(DaoConfig config) {
        super(config);
    }
    
    public ServiceItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVICE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"APP_NAME\" TEXT," + // 1: appName
                "\"APP_ICOM_RES_ID\" INTEGER," + // 2: appIcomResId
                "\"ID\" INTEGER," + // 3: id
                "\"ORDER_ID\" INTEGER," + // 4: orderId
                "\"SELECTEDONE\" INTEGER," + // 5: selectedone
                "\"SELECTED\" INTEGER," + // 6: selected
                "\"IS_HAS_NEW\" INTEGER," + // 7: isHasNew
                "\"USER_ID\" TEXT);"); // 8: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ServiceItem entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        Integer appIcomResId = entity.getAppIcomResId();
        if (appIcomResId != null) {
            stmt.bindLong(3, appIcomResId);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        Integer orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(5, orderId);
        }
 
        Integer selectedone = entity.getSelectedone();
        if (selectedone != null) {
            stmt.bindLong(6, selectedone);
        }
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(7, selected ? 1L: 0L);
        }
 
        Integer isHasNew = entity.getIsHasNew();
        if (isHasNew != null) {
            stmt.bindLong(8, isHasNew);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ServiceItem entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        Integer appIcomResId = entity.getAppIcomResId();
        if (appIcomResId != null) {
            stmt.bindLong(3, appIcomResId);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        Integer orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(5, orderId);
        }
 
        Integer selectedone = entity.getSelectedone();
        if (selectedone != null) {
            stmt.bindLong(6, selectedone);
        }
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(7, selected ? 1L: 0L);
        }
 
        Integer isHasNew = entity.getIsHasNew();
        if (isHasNew != null) {
            stmt.bindLong(8, isHasNew);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ServiceItem readEntity(Cursor cursor, int offset) {
        ServiceItem entity = new ServiceItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // appIcomResId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // orderId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // selectedone
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // selected
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // isHasNew
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ServiceItem entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppIcomResId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrderId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSelectedone(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSelected(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsHasNew(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ServiceItem entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ServiceItem entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ServiceItem entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
