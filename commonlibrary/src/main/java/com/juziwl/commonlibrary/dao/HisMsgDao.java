package com.juziwl.commonlibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.juziwl.commonlibrary.model.HisMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HIS_MSG".
*/
public class HisMsgDao extends AbstractDao<HisMsg, Long> {

    public static final String TABLENAME = "HIS_MSG";

    /**
     * Properties of entity HisMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromId = new Property(1, String.class, "fromId", false, "FROM_ID");
        public final static Property MsgImg = new Property(2, String.class, "msgImg", false, "MSG_IMG");
        public final static Property MsgText = new Property(3, String.class, "msgText", false, "MSG_TEXT");
        public final static Property MsgTitle = new Property(4, String.class, "msgTitle", false, "MSG_TITLE");
        public final static Property MsgTime = new Property(5, String.class, "msgTime", false, "MSG_TIME");
        public final static Property ChatType = new Property(6, String.class, "chatType", false, "CHAT_TYPE");
        public final static Property IsDel = new Property(7, String.class, "isDel", false, "IS_DEL");
        public final static Property NewNums = new Property(8, String.class, "newNums", false, "NEW_NUMS");
        public final static Property Flag1 = new Property(9, String.class, "flag1", false, "FLAG1");
        public final static Property Flag2 = new Property(10, String.class, "flag2", false, "FLAG2");
        public final static Property Flag3 = new Property(11, String.class, "flag3", false, "FLAG3");
        public final static Property Mid = new Property(12, String.class, "mid", false, "MID");
    }


    public HisMsgDao(DaoConfig config) {
        super(config);
    }
    
    public HisMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HIS_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM_ID\" TEXT," + // 1: fromId
                "\"MSG_IMG\" TEXT," + // 2: msgImg
                "\"MSG_TEXT\" TEXT," + // 3: msgText
                "\"MSG_TITLE\" TEXT," + // 4: msgTitle
                "\"MSG_TIME\" TEXT," + // 5: msgTime
                "\"CHAT_TYPE\" TEXT," + // 6: chatType
                "\"IS_DEL\" TEXT," + // 7: isDel
                "\"NEW_NUMS\" TEXT," + // 8: newNums
                "\"FLAG1\" TEXT," + // 9: flag1
                "\"FLAG2\" TEXT," + // 10: flag2
                "\"FLAG3\" TEXT," + // 11: flag3
                "\"MID\" TEXT);"); // 12: mid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HIS_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HisMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindString(2, fromId);
        }
 
        String msgImg = entity.getMsgImg();
        if (msgImg != null) {
            stmt.bindString(3, msgImg);
        }
 
        String msgText = entity.getMsgText();
        if (msgText != null) {
            stmt.bindString(4, msgText);
        }
 
        String msgTitle = entity.getMsgTitle();
        if (msgTitle != null) {
            stmt.bindString(5, msgTitle);
        }
 
        String msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindString(6, msgTime);
        }
 
        String chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindString(7, chatType);
        }
 
        String isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindString(8, isDel);
        }
 
        String newNums = entity.getNewNums();
        if (newNums != null) {
            stmt.bindString(9, newNums);
        }
 
        String flag1 = entity.getFlag1();
        if (flag1 != null) {
            stmt.bindString(10, flag1);
        }
 
        String flag2 = entity.getFlag2();
        if (flag2 != null) {
            stmt.bindString(11, flag2);
        }
 
        String flag3 = entity.getFlag3();
        if (flag3 != null) {
            stmt.bindString(12, flag3);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(13, mid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HisMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindString(2, fromId);
        }
 
        String msgImg = entity.getMsgImg();
        if (msgImg != null) {
            stmt.bindString(3, msgImg);
        }
 
        String msgText = entity.getMsgText();
        if (msgText != null) {
            stmt.bindString(4, msgText);
        }
 
        String msgTitle = entity.getMsgTitle();
        if (msgTitle != null) {
            stmt.bindString(5, msgTitle);
        }
 
        String msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindString(6, msgTime);
        }
 
        String chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindString(7, chatType);
        }
 
        String isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindString(8, isDel);
        }
 
        String newNums = entity.getNewNums();
        if (newNums != null) {
            stmt.bindString(9, newNums);
        }
 
        String flag1 = entity.getFlag1();
        if (flag1 != null) {
            stmt.bindString(10, flag1);
        }
 
        String flag2 = entity.getFlag2();
        if (flag2 != null) {
            stmt.bindString(11, flag2);
        }
 
        String flag3 = entity.getFlag3();
        if (flag3 != null) {
            stmt.bindString(12, flag3);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(13, mid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HisMsg readEntity(Cursor cursor, int offset) {
        HisMsg entity = new HisMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgText
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msgTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msgTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chatType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isDel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // newNums
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // flag1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // flag2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // flag3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // mid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HisMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChatType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNewNums(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFlag1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFlag2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFlag3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HisMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HisMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HisMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
